version: '3.3'

secrets:
  namecom_endpoint:
    file: "./secrets/namecom_endpoint.secret"
  namecom_username:
    file: "./secrets/namecom_username.secret"
  namecom_api_token:
    file: "./secrets/namecom_api_token.secret"

services:
  traefik:
    image: "traefik:v2.2"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=namedotcom"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=dixon@archethought.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    secrets:
      - "namecom_endpoint"
      - "namecom_username"
      - "namecom_api_token"
    environment:
      - "NAMECOM_ENDPOINT_FILE=/run/secrets/namecom_endpoint"
      - "NAMECOM_USERNAME_FILE=/run/secrets/namecom_username"
      - "NAMECOM_API_TOKEN_FILE=/run/secrets/namecom_api_token"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  # broker-rabbitmq:
  #   image: "rabbitmq:3.7.14-management"
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=rabbit_user
  #     - RABBITMQ_DEFAULT_PASS=rabbit_password
  db-postgres:
    image: "postgres:11.2"
    environment:
      - POSTGRES_USER=db_user 
      - POSTGRES_PASSWORD=db_password
  migration:
    build: .
    environment:
      - APP_ENV=${APP_ENV}
    command: flask db init && flask db migrate -m "Initial migration." && flask db upgrade
    depends_on:
      - db-postgres
  api:
    container_name: "api-service"
    build:
        context: .
        dockerfile: Dockerfile
    ports:
      - "80:5001"
    environment:
      - APP_ENV=${APP_ENV}
      - EMAIL_USER='YOURMAIL'
      - EMAIL_PASS='YOURPASS'
      - SQLALCHEMY_DATABASE_URI=postgres://db_user:db_password@db-postgres:5432/  # sqlite:///site.db
      - STATIC_URL=/static
      - STATIC_PATH=/flaskblog/static
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`archethought.space`) || Host(`www.archethought.space`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.routers.api.tls.domains[0].main=archethought.space"
      - "traefik.http.routers.api.tls.domains[0].sans=*.archethought.space"
      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # global redirect to https
      - "traefik.http.routers.redirs.rule=hostregexp(`{host:.*}`)"
      - "traefik.http.routers.redirs.entrypoints=web"
      - "traefik.http.routers.redirs.middlewares=redirect-to-https"
    # depends_on:
    #   - broker-rabbitmq
    #   - db-postgres
    #   - migration
  # api-worker:
  #     build: .
  #     command: celery worker --workdir=. -A  tasks.celery --loglevel=info
  #     environment:
  #       - APP_ENV=${APP_ENV}
  #     depends_on:
  #       - broker-rabbitmq
  #       - db-postgres
  #       - migration
  # api-beat:
  #     build: .
  #     command: celery beat -A tasks.celery --loglevel=info
  #     environment:
  #       - APP_ENV=${APP_ENV}
  #     depends_on:
  #       - broker-rabbitmq
  #       - db-postgres
  #       - migration

